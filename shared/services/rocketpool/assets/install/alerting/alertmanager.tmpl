# Autogenerated - DO NOT MODIFY THIS FILE DIRECTLY 

global:
  # ResolveTimeout is the default value used by alertmanager if the alert does
  # not include EndsAt, after this time passes it can declare the alert as resolved if it has not been updated.
  # This has no impact on alerts from Prometheus, as they always include EndsAt.
  # default = 5m
  resolve_timeout: 5m

route:
  # The labels by which incoming alerts are grouped together.
  group_by: ["alertname"]
  # How long to initially wait to send a notification for a group
  # of alerts. Allows to wait for an inhibiting alert to arrive or collect
  # more initial alerts for the same group.
  group_wait: 30s
  # How long to wait before sending a notification about new alerts that
  # are added to a group of alerts for which an initial notification has
  # already been sent. (Usually ~5m or more.)
  group_interval: 5m
  # How long to wait before sending a notification again if it has already been sent successfully for an alert.
  repeat_interval: 4h
  routes:
    # severity=info: Don't send the follow-up resolved notification.
    - match:
        severity: info
      continue: false
      # The notification destination
      receiver: "node_operator_no_resolved"
    # all other alerts get sent notifications for the initial firing _and_ resolved notifications.
    - receiver: "node_operator_default"
      #match: We want this to match all alerts (severity=info is first though so it will stop)

  # The notification destination
  receiver: "node_operator_default"

receivers:
  - name: "node_operator_default"
    {{- if .DiscordWebhookURL.Value }}
    discord_configs:
      - webhook_url: "{{ .DiscordWebhookURL.Value }}"
    {{- end }}

    {{- if and .PushoverToken.Value .PushoverUserKey.Value }}
    pushover_configs:
      - token: "{{ .PushoverToken.Value }}"
        user_key: "{{ .PushoverUserKey.Value }}"
        priority: {{ `'{{ if eq .CommonLabels.severity "critical" }}2{{ else if eq .CommonLabels.severity "warning" }}1{{ else }}0{{ end }}'` }}
    {{- end }}

  - name: "node_operator_no_resolved"
    {{- if .DiscordWebhookURL.Value }}
    discord_configs:
      - webhook_url: "{{ .DiscordWebhookURL.Value }}"
        send_resolved: false
    {{- end }}
    
    {{- if and .PushoverToken.Value .PushoverUserKey.Value }}
    pushover_configs:
      - token: "{{ .PushoverToken.Value }}"
        user_key: "{{ .PushoverUserKey.Value }}"
        priority: {{ `'{{ if eq .CommonLabels.severity "critical" }}2{{ else if eq .CommonLabels.severity "warning" }}1{{ else }}0{{ end }}'` }}
        send_resolved: false
    {{- end }}

inhibit_rules:
  # Inhibit rules mute a new alert (target) that matches an existing alert (source).
  - source_match:
      # if the existing alert (source) is severity=critical
      severity: "critical"
    target_match:
      # and the new alert (target) is severity=warning
      severity: "warning"
      # and the alertname, job, and instance labels have the same value
    equal: ["alertname", "job", "instance"]
