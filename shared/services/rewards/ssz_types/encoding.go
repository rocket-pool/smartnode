// Code generated by fastssz. DO NOT EDIT.
// Hash: d9fade4005dbe51e1b4b46856af7da0261506ec1712eab7b58cb3ddb6cd315d6
// Version: 0.1.3
package ssz_types

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the SSZFile_v1 object
func (s *SSZFile_v1) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(s)
}

// MarshalSSZTo ssz marshals the SSZFile_v1 object to a target array
func (s *SSZFile_v1) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(356)

	// Field (0) 'Magic'
	dst = append(dst, s.Magic[:]...)

	// Field (1) 'RewardsFileVersion'
	dst = ssz.MarshalUint64(dst, s.RewardsFileVersion)

	// Field (2) 'RulesetVersion'
	dst = ssz.MarshalUint64(dst, s.RulesetVersion)

	// Field (3) 'Network'
	dst = ssz.MarshalUint64(dst, uint64(s.Network))

	// Field (4) 'Index'
	dst = ssz.MarshalUint64(dst, s.Index)

	// Field (5) 'StartTime'
	dst = ssz.MarshalTime(dst, s.StartTime)

	// Field (6) 'EndTime'
	dst = ssz.MarshalTime(dst, s.EndTime)

	// Field (7) 'ConsensusStartBlock'
	dst = ssz.MarshalUint64(dst, s.ConsensusStartBlock)

	// Field (8) 'ConsensusEndBlock'
	dst = ssz.MarshalUint64(dst, s.ConsensusEndBlock)

	// Field (9) 'ExecutionStartBlock'
	dst = ssz.MarshalUint64(dst, s.ExecutionStartBlock)

	// Field (10) 'ExecutionEndBlock'
	dst = ssz.MarshalUint64(dst, s.ExecutionEndBlock)

	// Field (11) 'IntervalsPassed'
	dst = ssz.MarshalUint64(dst, s.IntervalsPassed)

	// Field (12) 'MerkleRoot'
	dst = append(dst, s.MerkleRoot[:]...)

	// Field (13) 'TotalRewards'
	if s.TotalRewards == nil {
		s.TotalRewards = new(TotalRewards)
	}
	if dst, err = s.TotalRewards.MarshalSSZTo(dst); err != nil {
		return
	}

	// Offset (14) 'NetworkRewards'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(s.NetworkRewards) * 104

	// Offset (15) 'NodeRewards'
	dst = ssz.WriteOffset(dst, offset)

	// Field (14) 'NetworkRewards'
	if size := len(s.NetworkRewards); size > 128 {
		err = ssz.ErrListTooBigFn("SSZFile_v1.NetworkRewards", size, 128)
		return
	}
	for ii := 0; ii < len(s.NetworkRewards); ii++ {
		if dst, err = s.NetworkRewards[ii].MarshalSSZTo(dst); err != nil {
			return
		}
	}

	// Field (15) 'NodeRewards'
	if size := len(s.NodeRewards); size > 9223372036854775807 {
		err = ssz.ErrListTooBigFn("SSZFile_v1.NodeRewards", size, 9223372036854775807)
		return
	}
	for ii := 0; ii < len(s.NodeRewards); ii++ {
		if dst, err = s.NodeRewards[ii].MarshalSSZTo(dst); err != nil {
			return
		}
	}

	return
}

// UnmarshalSSZ ssz unmarshals the SSZFile_v1 object
func (s *SSZFile_v1) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 356 {
		return ssz.ErrSize
	}

	tail := buf
	var o14, o15 uint64

	// Field (0) 'Magic'
	copy(s.Magic[:], buf[0:4])

	// Field (1) 'RewardsFileVersion'
	s.RewardsFileVersion = ssz.UnmarshallUint64(buf[4:12])

	// Field (2) 'RulesetVersion'
	s.RulesetVersion = ssz.UnmarshallUint64(buf[12:20])

	// Field (3) 'Network'
	s.Network = Network(ssz.UnmarshallUint64(buf[20:28]))

	// Field (4) 'Index'
	s.Index = ssz.UnmarshallUint64(buf[28:36])

	// Field (5) 'StartTime'
	s.StartTime = ssz.UnmarshalTime(buf[36:44])

	// Field (6) 'EndTime'
	s.EndTime = ssz.UnmarshalTime(buf[44:52])

	// Field (7) 'ConsensusStartBlock'
	s.ConsensusStartBlock = ssz.UnmarshallUint64(buf[52:60])

	// Field (8) 'ConsensusEndBlock'
	s.ConsensusEndBlock = ssz.UnmarshallUint64(buf[60:68])

	// Field (9) 'ExecutionStartBlock'
	s.ExecutionStartBlock = ssz.UnmarshallUint64(buf[68:76])

	// Field (10) 'ExecutionEndBlock'
	s.ExecutionEndBlock = ssz.UnmarshallUint64(buf[76:84])

	// Field (11) 'IntervalsPassed'
	s.IntervalsPassed = ssz.UnmarshallUint64(buf[84:92])

	// Field (12) 'MerkleRoot'
	copy(s.MerkleRoot[:], buf[92:124])

	// Field (13) 'TotalRewards'
	if s.TotalRewards == nil {
		s.TotalRewards = new(TotalRewards)
	}
	if err = s.TotalRewards.UnmarshalSSZ(buf[124:348]); err != nil {
		return err
	}

	// Offset (14) 'NetworkRewards'
	if o14 = ssz.ReadOffset(buf[348:352]); o14 > size {
		return ssz.ErrOffset
	}

	if o14 != 356 {
		return ssz.ErrInvalidVariableOffset
	}

	// Offset (15) 'NodeRewards'
	if o15 = ssz.ReadOffset(buf[352:356]); o15 > size || o14 > o15 {
		return ssz.ErrOffset
	}

	// Field (14) 'NetworkRewards'
	{
		buf = tail[o14:o15]
		num, err := ssz.DivideInt2(len(buf), 104, 128)
		if err != nil {
			return err
		}
		s.NetworkRewards = make([]*NetworkReward, num)
		for ii := 0; ii < num; ii++ {
			if s.NetworkRewards[ii] == nil {
				s.NetworkRewards[ii] = new(NetworkReward)
			}
			if err = s.NetworkRewards[ii].UnmarshalSSZ(buf[ii*104 : (ii+1)*104]); err != nil {
				return err
			}
		}
	}

	// Field (15) 'NodeRewards'
	{
		buf = tail[o15:]
		num, err := ssz.DivideInt2(len(buf), 124, 9223372036854775807)
		if err != nil {
			return err
		}
		s.NodeRewards = make([]*NodeReward, num)
		for ii := 0; ii < num; ii++ {
			if s.NodeRewards[ii] == nil {
				s.NodeRewards[ii] = new(NodeReward)
			}
			if err = s.NodeRewards[ii].UnmarshalSSZ(buf[ii*124 : (ii+1)*124]); err != nil {
				return err
			}
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the SSZFile_v1 object
func (s *SSZFile_v1) SizeSSZ() (size int) {
	size = 356

	// Field (14) 'NetworkRewards'
	size += len(s.NetworkRewards) * 104

	// Field (15) 'NodeRewards'
	size += len(s.NodeRewards) * 124

	return
}

// HashTreeRoot ssz hashes the SSZFile_v1 object
func (s *SSZFile_v1) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(s)
}

// HashTreeRootWith ssz hashes the SSZFile_v1 object with a hasher
func (s *SSZFile_v1) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Magic'
	hh.PutBytes(s.Magic[:])

	// Field (1) 'RewardsFileVersion'
	hh.PutUint64(s.RewardsFileVersion)

	// Field (2) 'RulesetVersion'
	hh.PutUint64(s.RulesetVersion)

	// Field (3) 'Network'
	hh.PutUint64(uint64(s.Network))

	// Field (4) 'Index'
	hh.PutUint64(s.Index)

	// Field (5) 'StartTime'
	hh.PutUint64(uint64(s.StartTime.Unix()))

	// Field (6) 'EndTime'
	hh.PutUint64(uint64(s.EndTime.Unix()))

	// Field (7) 'ConsensusStartBlock'
	hh.PutUint64(s.ConsensusStartBlock)

	// Field (8) 'ConsensusEndBlock'
	hh.PutUint64(s.ConsensusEndBlock)

	// Field (9) 'ExecutionStartBlock'
	hh.PutUint64(s.ExecutionStartBlock)

	// Field (10) 'ExecutionEndBlock'
	hh.PutUint64(s.ExecutionEndBlock)

	// Field (11) 'IntervalsPassed'
	hh.PutUint64(s.IntervalsPassed)

	// Field (12) 'MerkleRoot'
	hh.PutBytes(s.MerkleRoot[:])

	// Field (13) 'TotalRewards'
	if s.TotalRewards == nil {
		s.TotalRewards = new(TotalRewards)
	}
	if err = s.TotalRewards.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (14) 'NetworkRewards'
	{
		subIndx := hh.Index()
		num := uint64(len(s.NetworkRewards))
		if num > 128 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for _, elem := range s.NetworkRewards {
			if err = elem.HashTreeRootWith(hh); err != nil {
				return
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 128)
	}

	// Field (15) 'NodeRewards'
	{
		subIndx := hh.Index()
		num := uint64(len(s.NodeRewards))
		if num > 9223372036854775807 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for _, elem := range s.NodeRewards {
			if err = elem.HashTreeRootWith(hh); err != nil {
				return
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 9223372036854775807)
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the SSZFile_v1 object
func (s *SSZFile_v1) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(s)
}

// MarshalSSZ ssz marshals the TotalRewards object
func (t *TotalRewards) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(t)
}

// MarshalSSZTo ssz marshals the TotalRewards object to a target array
func (t *TotalRewards) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'ProtocolDaoRpl'
	if dst, err = t.ProtocolDaoRpl.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (1) 'TotalCollateralRpl'
	if dst, err = t.TotalCollateralRpl.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (2) 'TotalOracleDaoRpl'
	if dst, err = t.TotalOracleDaoRpl.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (3) 'TotalSmoothingPoolEth'
	if dst, err = t.TotalSmoothingPoolEth.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (4) 'PoolStakerSmoothingPoolEth'
	if dst, err = t.PoolStakerSmoothingPoolEth.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (5) 'NodeOperatorSmoothingPoolEth'
	if dst, err = t.NodeOperatorSmoothingPoolEth.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (6) 'TotalNodeWeight'
	if dst, err = t.TotalNodeWeight.MarshalSSZTo(dst); err != nil {
		return
	}

	return
}

// UnmarshalSSZ ssz unmarshals the TotalRewards object
func (t *TotalRewards) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 224 {
		return ssz.ErrSize
	}

	// Field (0) 'ProtocolDaoRpl'
	if err = t.ProtocolDaoRpl.UnmarshalSSZ(buf[0:32]); err != nil {
		return err
	}

	// Field (1) 'TotalCollateralRpl'
	if err = t.TotalCollateralRpl.UnmarshalSSZ(buf[32:64]); err != nil {
		return err
	}

	// Field (2) 'TotalOracleDaoRpl'
	if err = t.TotalOracleDaoRpl.UnmarshalSSZ(buf[64:96]); err != nil {
		return err
	}

	// Field (3) 'TotalSmoothingPoolEth'
	if err = t.TotalSmoothingPoolEth.UnmarshalSSZ(buf[96:128]); err != nil {
		return err
	}

	// Field (4) 'PoolStakerSmoothingPoolEth'
	if err = t.PoolStakerSmoothingPoolEth.UnmarshalSSZ(buf[128:160]); err != nil {
		return err
	}

	// Field (5) 'NodeOperatorSmoothingPoolEth'
	if err = t.NodeOperatorSmoothingPoolEth.UnmarshalSSZ(buf[160:192]); err != nil {
		return err
	}

	// Field (6) 'TotalNodeWeight'
	if err = t.TotalNodeWeight.UnmarshalSSZ(buf[192:224]); err != nil {
		return err
	}

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the TotalRewards object
func (t *TotalRewards) SizeSSZ() (size int) {
	size = 224
	return
}

// HashTreeRoot ssz hashes the TotalRewards object
func (t *TotalRewards) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(t)
}

// HashTreeRootWith ssz hashes the TotalRewards object with a hasher
func (t *TotalRewards) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'ProtocolDaoRpl'
	if err = t.ProtocolDaoRpl.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (1) 'TotalCollateralRpl'
	if err = t.TotalCollateralRpl.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (2) 'TotalOracleDaoRpl'
	if err = t.TotalOracleDaoRpl.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (3) 'TotalSmoothingPoolEth'
	if err = t.TotalSmoothingPoolEth.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (4) 'PoolStakerSmoothingPoolEth'
	if err = t.PoolStakerSmoothingPoolEth.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (5) 'NodeOperatorSmoothingPoolEth'
	if err = t.NodeOperatorSmoothingPoolEth.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (6) 'TotalNodeWeight'
	if err = t.TotalNodeWeight.HashTreeRootWith(hh); err != nil {
		return
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the TotalRewards object
func (t *TotalRewards) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(t)
}

// MarshalSSZ ssz marshals the NetworkReward object
func (n *NetworkReward) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(n)
}

// MarshalSSZTo ssz marshals the NetworkReward object to a target array
func (n *NetworkReward) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'Network'
	dst = ssz.MarshalUint64(dst, uint64(n.Network))

	// Field (1) 'CollateralRpl'
	if dst, err = n.CollateralRpl.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (2) 'OracleDaoRpl'
	if dst, err = n.OracleDaoRpl.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (3) 'SmoothingPoolEth'
	if dst, err = n.SmoothingPoolEth.MarshalSSZTo(dst); err != nil {
		return
	}

	return
}

// UnmarshalSSZ ssz unmarshals the NetworkReward object
func (n *NetworkReward) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 104 {
		return ssz.ErrSize
	}

	// Field (0) 'Network'
	n.Network = Layer(ssz.UnmarshallUint64(buf[0:8]))

	// Field (1) 'CollateralRpl'
	if err = n.CollateralRpl.UnmarshalSSZ(buf[8:40]); err != nil {
		return err
	}

	// Field (2) 'OracleDaoRpl'
	if err = n.OracleDaoRpl.UnmarshalSSZ(buf[40:72]); err != nil {
		return err
	}

	// Field (3) 'SmoothingPoolEth'
	if err = n.SmoothingPoolEth.UnmarshalSSZ(buf[72:104]); err != nil {
		return err
	}

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the NetworkReward object
func (n *NetworkReward) SizeSSZ() (size int) {
	size = 104
	return
}

// HashTreeRoot ssz hashes the NetworkReward object
func (n *NetworkReward) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(n)
}

// HashTreeRootWith ssz hashes the NetworkReward object with a hasher
func (n *NetworkReward) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Network'
	hh.PutUint64(uint64(n.Network))

	// Field (1) 'CollateralRpl'
	if err = n.CollateralRpl.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (2) 'OracleDaoRpl'
	if err = n.OracleDaoRpl.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (3) 'SmoothingPoolEth'
	if err = n.SmoothingPoolEth.HashTreeRootWith(hh); err != nil {
		return
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the NetworkReward object
func (n *NetworkReward) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(n)
}

// MarshalSSZ ssz marshals the NodeReward object
func (n *NodeReward) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(n)
}

// MarshalSSZTo ssz marshals the NodeReward object to a target array
func (n *NodeReward) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'Address'
	dst = append(dst, n.Address[:]...)

	// Field (1) 'Network'
	dst = ssz.MarshalUint64(dst, uint64(n.Network))

	// Field (2) 'CollateralRpl'
	if dst, err = n.CollateralRpl.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (3) 'OracleDaoRpl'
	if dst, err = n.OracleDaoRpl.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (4) 'SmoothingPoolEth'
	if dst, err = n.SmoothingPoolEth.MarshalSSZTo(dst); err != nil {
		return
	}

	return
}

// UnmarshalSSZ ssz unmarshals the NodeReward object
func (n *NodeReward) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 124 {
		return ssz.ErrSize
	}

	// Field (0) 'Address'
	copy(n.Address[:], buf[0:20])

	// Field (1) 'Network'
	n.Network = Layer(ssz.UnmarshallUint64(buf[20:28]))

	// Field (2) 'CollateralRpl'
	if err = n.CollateralRpl.UnmarshalSSZ(buf[28:60]); err != nil {
		return err
	}

	// Field (3) 'OracleDaoRpl'
	if err = n.OracleDaoRpl.UnmarshalSSZ(buf[60:92]); err != nil {
		return err
	}

	// Field (4) 'SmoothingPoolEth'
	if err = n.SmoothingPoolEth.UnmarshalSSZ(buf[92:124]); err != nil {
		return err
	}

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the NodeReward object
func (n *NodeReward) SizeSSZ() (size int) {
	size = 124
	return
}

// HashTreeRoot ssz hashes the NodeReward object
func (n *NodeReward) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(n)
}

// HashTreeRootWith ssz hashes the NodeReward object with a hasher
func (n *NodeReward) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Address'
	hh.PutBytes(n.Address[:])

	// Field (1) 'Network'
	hh.PutUint64(uint64(n.Network))

	// Field (2) 'CollateralRpl'
	if err = n.CollateralRpl.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (3) 'OracleDaoRpl'
	if err = n.OracleDaoRpl.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (4) 'SmoothingPoolEth'
	if err = n.SmoothingPoolEth.HashTreeRootWith(hh); err != nil {
		return
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the NodeReward object
func (n *NodeReward) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(n)
}

// MarshalSSZ ssz marshals the SSZFile_v2 object
func (s *SSZFile_v2) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(s)
}

// MarshalSSZTo ssz marshals the SSZFile_v2 object to a target array
func (s *SSZFile_v2) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(420)

	// Field (0) 'Magic'
	dst = append(dst, s.Magic[:]...)

	// Field (1) 'RewardsFileVersion'
	dst = ssz.MarshalUint64(dst, s.RewardsFileVersion)

	// Field (2) 'RulesetVersion'
	dst = ssz.MarshalUint64(dst, s.RulesetVersion)

	// Field (3) 'Network'
	dst = ssz.MarshalUint64(dst, uint64(s.Network))

	// Field (4) 'Index'
	dst = ssz.MarshalUint64(dst, s.Index)

	// Field (5) 'StartTime'
	dst = ssz.MarshalTime(dst, s.StartTime)

	// Field (6) 'EndTime'
	dst = ssz.MarshalTime(dst, s.EndTime)

	// Field (7) 'ConsensusStartBlock'
	dst = ssz.MarshalUint64(dst, s.ConsensusStartBlock)

	// Field (8) 'ConsensusEndBlock'
	dst = ssz.MarshalUint64(dst, s.ConsensusEndBlock)

	// Field (9) 'ExecutionStartBlock'
	dst = ssz.MarshalUint64(dst, s.ExecutionStartBlock)

	// Field (10) 'ExecutionEndBlock'
	dst = ssz.MarshalUint64(dst, s.ExecutionEndBlock)

	// Field (11) 'IntervalsPassed'
	dst = ssz.MarshalUint64(dst, s.IntervalsPassed)

	// Field (12) 'MerkleRoot'
	dst = append(dst, s.MerkleRoot[:]...)

	// Field (13) 'TotalRewards'
	if s.TotalRewards == nil {
		s.TotalRewards = new(TotalRewards_v2)
	}
	if dst, err = s.TotalRewards.MarshalSSZTo(dst); err != nil {
		return
	}

	// Offset (14) 'NetworkRewards'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(s.NetworkRewards) * 104

	// Offset (15) 'NodeRewards'
	dst = ssz.WriteOffset(dst, offset)

	// Field (14) 'NetworkRewards'
	if size := len(s.NetworkRewards); size > 128 {
		err = ssz.ErrListTooBigFn("SSZFile_v2.NetworkRewards", size, 128)
		return
	}
	for ii := 0; ii < len(s.NetworkRewards); ii++ {
		if dst, err = s.NetworkRewards[ii].MarshalSSZTo(dst); err != nil {
			return
		}
	}

	// Field (15) 'NodeRewards'
	if size := len(s.NodeRewards); size > 9223372036854775807 {
		err = ssz.ErrListTooBigFn("SSZFile_v2.NodeRewards", size, 9223372036854775807)
		return
	}
	for ii := 0; ii < len(s.NodeRewards); ii++ {
		if dst, err = s.NodeRewards[ii].MarshalSSZTo(dst); err != nil {
			return
		}
	}

	return
}

// UnmarshalSSZ ssz unmarshals the SSZFile_v2 object
func (s *SSZFile_v2) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 420 {
		return ssz.ErrSize
	}

	tail := buf
	var o14, o15 uint64

	// Field (0) 'Magic'
	copy(s.Magic[:], buf[0:4])

	// Field (1) 'RewardsFileVersion'
	s.RewardsFileVersion = ssz.UnmarshallUint64(buf[4:12])

	// Field (2) 'RulesetVersion'
	s.RulesetVersion = ssz.UnmarshallUint64(buf[12:20])

	// Field (3) 'Network'
	s.Network = Network(ssz.UnmarshallUint64(buf[20:28]))

	// Field (4) 'Index'
	s.Index = ssz.UnmarshallUint64(buf[28:36])

	// Field (5) 'StartTime'
	s.StartTime = ssz.UnmarshalTime(buf[36:44])

	// Field (6) 'EndTime'
	s.EndTime = ssz.UnmarshalTime(buf[44:52])

	// Field (7) 'ConsensusStartBlock'
	s.ConsensusStartBlock = ssz.UnmarshallUint64(buf[52:60])

	// Field (8) 'ConsensusEndBlock'
	s.ConsensusEndBlock = ssz.UnmarshallUint64(buf[60:68])

	// Field (9) 'ExecutionStartBlock'
	s.ExecutionStartBlock = ssz.UnmarshallUint64(buf[68:76])

	// Field (10) 'ExecutionEndBlock'
	s.ExecutionEndBlock = ssz.UnmarshallUint64(buf[76:84])

	// Field (11) 'IntervalsPassed'
	s.IntervalsPassed = ssz.UnmarshallUint64(buf[84:92])

	// Field (12) 'MerkleRoot'
	copy(s.MerkleRoot[:], buf[92:124])

	// Field (13) 'TotalRewards'
	if s.TotalRewards == nil {
		s.TotalRewards = new(TotalRewards_v2)
	}
	if err = s.TotalRewards.UnmarshalSSZ(buf[124:412]); err != nil {
		return err
	}

	// Offset (14) 'NetworkRewards'
	if o14 = ssz.ReadOffset(buf[412:416]); o14 > size {
		return ssz.ErrOffset
	}

	if o14 != 420 {
		return ssz.ErrInvalidVariableOffset
	}

	// Offset (15) 'NodeRewards'
	if o15 = ssz.ReadOffset(buf[416:420]); o15 > size || o14 > o15 {
		return ssz.ErrOffset
	}

	// Field (14) 'NetworkRewards'
	{
		buf = tail[o14:o15]
		num, err := ssz.DivideInt2(len(buf), 104, 128)
		if err != nil {
			return err
		}
		s.NetworkRewards = make([]*NetworkReward, num)
		for ii := 0; ii < num; ii++ {
			if s.NetworkRewards[ii] == nil {
				s.NetworkRewards[ii] = new(NetworkReward)
			}
			if err = s.NetworkRewards[ii].UnmarshalSSZ(buf[ii*104 : (ii+1)*104]); err != nil {
				return err
			}
		}
	}

	// Field (15) 'NodeRewards'
	{
		buf = tail[o15:]
		num, err := ssz.DivideInt2(len(buf), 156, 9223372036854775807)
		if err != nil {
			return err
		}
		s.NodeRewards = make([]*NodeReward_v2, num)
		for ii := 0; ii < num; ii++ {
			if s.NodeRewards[ii] == nil {
				s.NodeRewards[ii] = new(NodeReward_v2)
			}
			if err = s.NodeRewards[ii].UnmarshalSSZ(buf[ii*156 : (ii+1)*156]); err != nil {
				return err
			}
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the SSZFile_v2 object
func (s *SSZFile_v2) SizeSSZ() (size int) {
	size = 420

	// Field (14) 'NetworkRewards'
	size += len(s.NetworkRewards) * 104

	// Field (15) 'NodeRewards'
	size += len(s.NodeRewards) * 156

	return
}

// HashTreeRoot ssz hashes the SSZFile_v2 object
func (s *SSZFile_v2) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(s)
}

// HashTreeRootWith ssz hashes the SSZFile_v2 object with a hasher
func (s *SSZFile_v2) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Magic'
	hh.PutBytes(s.Magic[:])

	// Field (1) 'RewardsFileVersion'
	hh.PutUint64(s.RewardsFileVersion)

	// Field (2) 'RulesetVersion'
	hh.PutUint64(s.RulesetVersion)

	// Field (3) 'Network'
	hh.PutUint64(uint64(s.Network))

	// Field (4) 'Index'
	hh.PutUint64(s.Index)

	// Field (5) 'StartTime'
	hh.PutUint64(uint64(s.StartTime.Unix()))

	// Field (6) 'EndTime'
	hh.PutUint64(uint64(s.EndTime.Unix()))

	// Field (7) 'ConsensusStartBlock'
	hh.PutUint64(s.ConsensusStartBlock)

	// Field (8) 'ConsensusEndBlock'
	hh.PutUint64(s.ConsensusEndBlock)

	// Field (9) 'ExecutionStartBlock'
	hh.PutUint64(s.ExecutionStartBlock)

	// Field (10) 'ExecutionEndBlock'
	hh.PutUint64(s.ExecutionEndBlock)

	// Field (11) 'IntervalsPassed'
	hh.PutUint64(s.IntervalsPassed)

	// Field (12) 'MerkleRoot'
	hh.PutBytes(s.MerkleRoot[:])

	// Field (13) 'TotalRewards'
	if s.TotalRewards == nil {
		s.TotalRewards = new(TotalRewards_v2)
	}
	if err = s.TotalRewards.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (14) 'NetworkRewards'
	{
		subIndx := hh.Index()
		num := uint64(len(s.NetworkRewards))
		if num > 128 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for _, elem := range s.NetworkRewards {
			if err = elem.HashTreeRootWith(hh); err != nil {
				return
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 128)
	}

	// Field (15) 'NodeRewards'
	{
		subIndx := hh.Index()
		num := uint64(len(s.NodeRewards))
		if num > 9223372036854775807 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for _, elem := range s.NodeRewards {
			if err = elem.HashTreeRootWith(hh); err != nil {
				return
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 9223372036854775807)
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the SSZFile_v2 object
func (s *SSZFile_v2) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(s)
}

// MarshalSSZ ssz marshals the TotalRewards_v2 object
func (t *TotalRewards_v2) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(t)
}

// MarshalSSZTo ssz marshals the TotalRewards_v2 object to a target array
func (t *TotalRewards_v2) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'ProtocolDaoRpl'
	if dst, err = t.ProtocolDaoRpl.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (1) 'TotalCollateralRpl'
	if dst, err = t.TotalCollateralRpl.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (2) 'TotalOracleDaoRpl'
	if dst, err = t.TotalOracleDaoRpl.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (3) 'TotalSmoothingPoolEth'
	if dst, err = t.TotalSmoothingPoolEth.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (4) 'PoolStakerSmoothingPoolEth'
	if dst, err = t.PoolStakerSmoothingPoolEth.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (5) 'NodeOperatorSmoothingPoolEth'
	if dst, err = t.NodeOperatorSmoothingPoolEth.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (6) 'TotalNodeWeight'
	if dst, err = t.TotalNodeWeight.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (7) 'TotalVoterShareEth'
	if dst, err = t.TotalVoterShareEth.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (8) 'SmoothingPoolVoterShareEth'
	if dst, err = t.SmoothingPoolVoterShareEth.MarshalSSZTo(dst); err != nil {
		return
	}

	return
}

// UnmarshalSSZ ssz unmarshals the TotalRewards_v2 object
func (t *TotalRewards_v2) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 288 {
		return ssz.ErrSize
	}

	// Field (0) 'ProtocolDaoRpl'
	if err = t.ProtocolDaoRpl.UnmarshalSSZ(buf[0:32]); err != nil {
		return err
	}

	// Field (1) 'TotalCollateralRpl'
	if err = t.TotalCollateralRpl.UnmarshalSSZ(buf[32:64]); err != nil {
		return err
	}

	// Field (2) 'TotalOracleDaoRpl'
	if err = t.TotalOracleDaoRpl.UnmarshalSSZ(buf[64:96]); err != nil {
		return err
	}

	// Field (3) 'TotalSmoothingPoolEth'
	if err = t.TotalSmoothingPoolEth.UnmarshalSSZ(buf[96:128]); err != nil {
		return err
	}

	// Field (4) 'PoolStakerSmoothingPoolEth'
	if err = t.PoolStakerSmoothingPoolEth.UnmarshalSSZ(buf[128:160]); err != nil {
		return err
	}

	// Field (5) 'NodeOperatorSmoothingPoolEth'
	if err = t.NodeOperatorSmoothingPoolEth.UnmarshalSSZ(buf[160:192]); err != nil {
		return err
	}

	// Field (6) 'TotalNodeWeight'
	if err = t.TotalNodeWeight.UnmarshalSSZ(buf[192:224]); err != nil {
		return err
	}

	// Field (7) 'TotalVoterShareEth'
	if err = t.TotalVoterShareEth.UnmarshalSSZ(buf[224:256]); err != nil {
		return err
	}

	// Field (8) 'SmoothingPoolVoterShareEth'
	if err = t.SmoothingPoolVoterShareEth.UnmarshalSSZ(buf[256:288]); err != nil {
		return err
	}

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the TotalRewards_v2 object
func (t *TotalRewards_v2) SizeSSZ() (size int) {
	size = 288
	return
}

// HashTreeRoot ssz hashes the TotalRewards_v2 object
func (t *TotalRewards_v2) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(t)
}

// HashTreeRootWith ssz hashes the TotalRewards_v2 object with a hasher
func (t *TotalRewards_v2) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'ProtocolDaoRpl'
	if err = t.ProtocolDaoRpl.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (1) 'TotalCollateralRpl'
	if err = t.TotalCollateralRpl.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (2) 'TotalOracleDaoRpl'
	if err = t.TotalOracleDaoRpl.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (3) 'TotalSmoothingPoolEth'
	if err = t.TotalSmoothingPoolEth.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (4) 'PoolStakerSmoothingPoolEth'
	if err = t.PoolStakerSmoothingPoolEth.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (5) 'NodeOperatorSmoothingPoolEth'
	if err = t.NodeOperatorSmoothingPoolEth.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (6) 'TotalNodeWeight'
	if err = t.TotalNodeWeight.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (7) 'TotalVoterShareEth'
	if err = t.TotalVoterShareEth.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (8) 'SmoothingPoolVoterShareEth'
	if err = t.SmoothingPoolVoterShareEth.HashTreeRootWith(hh); err != nil {
		return
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the TotalRewards_v2 object
func (t *TotalRewards_v2) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(t)
}

// MarshalSSZ ssz marshals the NodeReward_v2 object
func (n *NodeReward_v2) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(n)
}

// MarshalSSZTo ssz marshals the NodeReward_v2 object to a target array
func (n *NodeReward_v2) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'Address'
	dst = append(dst, n.Address[:]...)

	// Field (1) 'Network'
	dst = ssz.MarshalUint64(dst, uint64(n.Network))

	// Field (2) 'CollateralRpl'
	if dst, err = n.CollateralRpl.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (3) 'OracleDaoRpl'
	if dst, err = n.OracleDaoRpl.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (4) 'SmoothingPoolEth'
	if dst, err = n.SmoothingPoolEth.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (5) 'VoterShareEth'
	if dst, err = n.VoterShareEth.MarshalSSZTo(dst); err != nil {
		return
	}

	return
}

// UnmarshalSSZ ssz unmarshals the NodeReward_v2 object
func (n *NodeReward_v2) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 156 {
		return ssz.ErrSize
	}

	// Field (0) 'Address'
	copy(n.Address[:], buf[0:20])

	// Field (1) 'Network'
	n.Network = Layer(ssz.UnmarshallUint64(buf[20:28]))

	// Field (2) 'CollateralRpl'
	if err = n.CollateralRpl.UnmarshalSSZ(buf[28:60]); err != nil {
		return err
	}

	// Field (3) 'OracleDaoRpl'
	if err = n.OracleDaoRpl.UnmarshalSSZ(buf[60:92]); err != nil {
		return err
	}

	// Field (4) 'SmoothingPoolEth'
	if err = n.SmoothingPoolEth.UnmarshalSSZ(buf[92:124]); err != nil {
		return err
	}

	// Field (5) 'VoterShareEth'
	if err = n.VoterShareEth.UnmarshalSSZ(buf[124:156]); err != nil {
		return err
	}

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the NodeReward_v2 object
func (n *NodeReward_v2) SizeSSZ() (size int) {
	size = 156
	return
}

// HashTreeRoot ssz hashes the NodeReward_v2 object
func (n *NodeReward_v2) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(n)
}

// HashTreeRootWith ssz hashes the NodeReward_v2 object with a hasher
func (n *NodeReward_v2) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Address'
	hh.PutBytes(n.Address[:])

	// Field (1) 'Network'
	hh.PutUint64(uint64(n.Network))

	// Field (2) 'CollateralRpl'
	if err = n.CollateralRpl.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (3) 'OracleDaoRpl'
	if err = n.OracleDaoRpl.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (4) 'SmoothingPoolEth'
	if err = n.SmoothingPoolEth.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (5) 'VoterShareEth'
	if err = n.VoterShareEth.HashTreeRootWith(hh); err != nil {
		return
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the NodeReward_v2 object
func (n *NodeReward_v2) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(n)
}
